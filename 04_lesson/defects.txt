Баг-репорт

Дефект 1: Некорректная обработка метода contains в delete_symbol для пустого символа
Описание: Метод `delete_symbol` использует метод `contains` для проверки наличия `symbol` в `string` перед вызовом `replace`. Если `symbol` — пустая строка (`""`), метод `contains` возвращает `False`, и `replace` не вызывается. Это приводит к тому, что метод `delete_symbol` не обрабатывает случай с пустой строкой, хотя `string.replace("", "")` является валидной операцией.

Ожидаемый результат: Метод `delete_symbol` должен возвращать исходную строку для пустого `symbol`, используя `string.replace("", "")`.

Фактический результат: Метод возвращает исходную строку, но из-за ненужной проверки через `contains`, что может запутать.

Шаги воспроизведения:
1. Создать `StringUtils`.
2. Вызвать `delete_symbol("SkyPro", "")`.
3. Получить результат `"SkyPro"`.

Предложение по исправлению: Удалить проверку `if self.contains(string, symbol)` и использовать `string.replace(symbol, "")` напрямую.

Приоритет: Низкий.


Дефект 2: Метод trim не обрабатывает другие пробельные символы
Описание: Метод `trim` использует `removeprefix(" ")` для удаления пробелов в начале строки, но не обрабатывает другие пробельные символы, такие как табуляция (`\t`) или перенос строки (`\n`). Это отличается от стандартного поведения `strip()` или `lstrip()`, которые удаляют все пробельные символы.

ООжидаемый результат: Метод `trim` должен удалять все пробельные символы в начале строки (пробелы, табуляцию, переносы строк и т.д.), как это делает `lstrip()`.

Фактический результат: Метод удаляет только одиночные пробелы (`" "`), оставляя другие пробельные символы, например, `"\t  hello"` становится `"\t  hello"`.

Шаги воспроизведения:
1. Создать `StringUtils`.
2. Вызвать `trim("\t  hello")`.
3. Получить результат `"\t  hello"` вместо `"hello"`.

Предложение по исправлению: Заменить цикл с `removeprefix(" ")` на использование `string.lstrip()` для удаления всех пробельных символов.

Приоритет: Средний (может повлиять на обработку строк с нестандартными пробелами).